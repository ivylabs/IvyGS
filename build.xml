<project name="" basedir="." default="dist" xmlns:ivy="antlib:org.apache.ivy.ant">
	<description>
    This build file is used to create the IvyGS project
    and works with the common_build.xml file.
  </description>
	<!-- Import the common_build.xml file which contains all the default tasks -->
	<import file="build-res/subfloor-pkg.xml" id="subfloor" />
	<property name="plugin.name" value="IvyGS" description="Name of the plugin" />
	<property name="stage.dir" value="${bin.dir}/stage" description="Name of the resource directory" />
	<tstamp />
	<!-- Build the project.revision property -->
	<property name="distribution.version" value="${project.revision}" />
	<echo>distribution.version = ${distribution.version}</echo>
	<property name="plugin.artifact.id" value="${plugin.name}" />
	<property name="plugin.zipfile" value="${plugin.artifact.id}.zip" />

	<target name="checkstyle" description="Generates a report of code convention violations." depends="init-checkstyle">
		<!-- See http://checkstyle.sourceforge.net/anttask.html for full options of using checkstyle with ant-->
		<checkstyle config="build-res/checkstyle.xml" failureProperty="${bin.dir}/checkstyle.failure" failOnViolation="false">
			<formatter type="xml" tofile="${bin.dir}/checkstyle-result.xml" />
			<fileset dir="src" includes="**/*.java" />
		</checkstyle>
	</target>

	<target name="init-checkstyle" depends="resolve">
		<path id="checkstyle.lib.path">
			<fileset dir="runtime-lib" includes="*.jar" />
		</path>
		<!-- Sevntu custom checks are retrieved by Ivy into lib folder and will be accessible to checkstyle-->
		<taskdef resource="checkstyletask.properties" classpathref="checkstyle.lib.path" />
	</target>

	<!--=======================================================================
              dist
              Creates a distribution of this project's plugin zip
              ====================================================================-->
	<target name="dist" depends="clean,resolve,build,checkstyle" description="Creates a distribution">
		<!-- delete and re-create the plugin dist folder tree -->
		<mkdir dir="${stage.dir}" />
		<mkdir dir="${stage.dir}/${plugin.name}" />
		<mkdir dir="${stage.dir}/${plugin.name}" />
		<mkdir dir="${dist.dir}" />
		<!-- copy the entire plugin to that folder  -->
		<copy todir="${stage.dir}/${plugin.name}/" overwrite="true">
			<fileset dir=".">
				<include name="**/*" />
				<exclude name="bin/" />
				<exclude name="dev-lib/" />
				<exclude name="test-lib/" />
				<exclude name="build/" />
				<exclude name="runtime-lib/" />
				<exclude name=".settings/" />
				<exclude name="src/" />
				<exclude name="dist/" />
				<exclude name="package-res/" />
				<exclude name="build-res/" />
				<exclude name="build.xml" />
				<exclude name="build.properties" />
				<exclude name="ivy.xml" />
				<exclude name="ivysettings.xml" />
				<exclude name=".project" />
				<exclude name=".classpath" />
			</fileset>
		</copy>
		<copy todir="./lib" overwrite="true">
			<fileset dir="${devlib.dir}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${stage.dir}/${plugin.name}/lib" overwrite="true">
			<fileset dir="${devlib.dir}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${stage.dir}/${plugin.name}/lib" overwrite="true">
			<fileset dir="${dist.dir}">
				<include name="${ivy.artifact.id}-${project.revision}.jar" />
			</fileset>
		</copy>
		<copy todir="./lib" overwrite="true">
			<fileset dir="${dist.dir}">
				<include name="${ivy.artifact.id}-${project.revision}.jar" />
			</fileset>
		</copy>
		<!-- create the version file -->
		<tstamp />
		<property name="sequential.build.id" value="manual-${DSTAMP}" />
		<echo file="${stage.dir}/${plugin.name}/version.xml" message="&lt;version branch='STABLE' buildId='${sequential.build.id}'>${distribution.version}&lt;/version>" />
		<!-- create a zip file -->
		<zip zipfile="${dist.dir}/${plugin.zipfile}" basedir="${stage.dir}" includes="${plugin.name}/**/*" excludes="**/Thumbs.db" />

		<echo file="${dist.dir}/marketplace.xml">&lt;version>
	    &lt;branch>TRUNK&lt;/branch>
		&lt;version>${distribution.version}&lt;/version>
		&lt;name>Trunk&lt;/name>
		&lt;package_url>not defined&lt;/package_url>
		&lt;description>@PLUGIN_PACKAGE_DESCRIPTION&lt;/description>
		&lt;build_id>${sequential.build.id}&lt;/build_id>
		&lt;/version>	</echo>
		

	</target>
	<!--=======================================================================
              install-plugin
              Installs the plugin locally
              ====================================================================-->
	<target name="install-plugin" depends="clean, resolve, dist" description="Installs the plugin locally">
		<fail message="plugin.local.install.solutions.dir not set - cannot copy" unless="plugin.local.install.solutions.dir" />
		<delete dir="${plugin.local.install.solutions.dir}/system/${plugin.name}" />
		<copy todir="${plugin.local.install.solutions.dir}/system/${plugin.name}">
			<fileset dir="${stage.dir}/${plugin.name}">
				<include name="**/*" />
			</fileset>
		</copy>
		<get src="http://127.0.0.1:8080/pentaho/Publish?publish=now&amp;class=org.pentaho.platform.plugin.services.pluginmgr.PluginAdapter&amp;userid=${plugin.local.install.user}&amp;password=${plugin.local.install.pass}" dest="${stage.dir}/blah.html" />
	</target>
	<!-- Overriding resolve target so we can add resolve-dev -->
	<target name="resolve" depends="resolve-default, resolve-test, resolve-codegen, resolve-runtime, ivy.check-releasable" description="Retrieves all the dependent libraries" />
	<target name="resolve-runtime" depends="resolve-init">
		<ivy:resolve file="${ivyfile}" conf="runtime" />
		<ivy:retrieve conf="runtime" pattern="${runtimelib.dir}/[module]-[revision](-[classifier]).[ext]" />
	</target>
	<target name="clean-jars">
		<delete dir="${lib.dir}" />
		<delete dir="${testlib.dir}" />
		<delete dir="${runtimelib.dir}" />
	</target>
</project>
